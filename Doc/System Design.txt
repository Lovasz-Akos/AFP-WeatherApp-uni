1. Goal of the system
We aimed to create a simple, intuitive, beautiful weather app,
that's ran in the cloud, thus supporting just about every device that can load the page.
We feel that many if not most weather sites compact information too densely and provide too much data
that isn't truely useful, such as sattelite and radar images of could formations have close to no meaning to
the every day user.


2. Project plan
Contributors.                Roles.                        

1.Lovász Ákos       > Original idea, Project manager, Documentation, 
2.Bálint Krigovszki > UI Designer, Documentation
3.Om Parkash        > Backend programmer, Documentation
4.Yang Yizhou       > Backend/Frontend programmer, Documentation


3. Business process model
by default ,the app will show the weather information of Kapolna in Huangary, and there is 
a search bar,user can input a location(city name) in the bar,then the app will down weather information 
from Weatherstack via API link and show the information,if the user input wrong name ,the app will do nothing

4. Requirements
The site has to achieve the following goals:
    -Simple, intuitive interface
    -Ability to search for any city/town
    -Display current weather with termperature
    -Display weather forecast


5. Functional plan
As the site provides no option to register an account, we don't need to set up differing levels of permissions
or access levels to different features. We provide all the functionality as-is.


6. Physical enviorement
the platform for the program is visual studio code , and it was created by Javascript , HTML and CSS .


7. Architectural plan
The application's design is created via HTML and CSS. The HTML contains wrapper classes and classes have boxes 
that boxes contains data , data is forecast weather data that is display by axios using API from Weatherstack for that 
we have used a function named 'DisplayWeather.js'.
then we have a function 'Navbar.js' that contains the search button, to input different location .
As it is connected to Weatherstack so any time you  refresh it will give u updated data.



8. Implementation plan
for this web based project we used html to build the basic structure then used CSS elements and classes to give it a simple and clean design anyone can
easily understand.we also used the Javascript to handle the mechanisme of our web project
in Javascript we used react and axios to display weather data.

9. Testing plan
during test stratgy,we need to test every function one by one,including system testing
the tester should have the ability to understand customers point of view,then we should test the whole
program,the goal is to test the whole program with random city name(including wrong city name) to see what will happen,
if anything uxpected occure ,then we need to fix them.

10. Install plan
As this is a self-contained web application, it can be hosted on basically any computer with an internet connection.
The API key used for weather data communication is hardcoded into the JS, as it should not be accessed by any users
outside of the system admin.


11. Maintenance plan
Since the interface was designed to be as dynamic as possible, the only part of the app that could require maintenance
is the weather data API itself. This API key can easily be changed by adjusting a single variable in the code,
this will update all occurances of the API key.